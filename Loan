
Bitfinex Trading Library for Python - Bitcoin, Ethereum, Ripple and more
https://api.travis-ci.org/bitfinexcom/bitfinex-api-py.svg?branch=master

A Python reference implementation of the Bitfinex API for both REST and websocket interaction.

Features
Official implementation
Websocket V2 and Rest V2
Connection multiplexing
Order and wallet management
All market data feeds
Installation
Clone package into PYTHONPATH:

git clone https://github.com/bitfinexcom/bitfinex-api-py.git
cd bitfinex-api-py
Or via pip:

python3 -m pip install bitfinex-api-py
Run the trades/candles example:

cd bfxapi/examples/ws
python3 subscribe_trades_candles.py
Quickstart
import os
import sys
from bfxapi import Client, Order

bfx = Client(
  API_KEY='<YOUR_API_KEY>',
  API_SECRET='<YOUR_API_SECRET>'
)

@bfx.ws.on('authenticated')
async def submit_order(auth_message):
  await bfx.ws.submit_order('tBTCUSD', 19000, 0.01, Order.Type.EXCHANGE_MARKET)

bfx.ws.run()
Docs
V2 Rest - Documentation
V2 Websocket - Documentation
Examples
Authenticate
bfx = Client(
  API_KEY='<YOUR_API_KEY>',
  API_SECRET='<YOUR_API_SECRET>'
)

@bfx.ws.on('authenticated')
async def do_something():
  print ("Success!")

bfx.ws.run()
Subscribe to trades
from bfxapi import Client

bfx = Client(
  API_KEY=API_KEY,
  API_SECRET=API_SECRET
)

@bfx.ws.on('new_trade')
def log_trade(trade):
  print ("New trade: {}".format(trade))

@bfx.ws.on('connected')
def start():
  bfx.ws.subscribe('trades', 'tBTCUSD')

bfx.ws.run()
Withdraw from wallet via REST
bfx = Client(
  API_KEY=API_KEY,
  API_SECRET=API_SECRET,
  logLevel='DEBUG'
)
response = await bfx.rest.submit_wallet_withdraw("exchange", "tetheruse", 5, "0xc5bbb852f82c24327693937d4012f496cff7eddf")
print ("Address: ", response.notify_info)
See the examples directory for more, like:

Creating/updating an order
Subscribing to orderbook updates
Withdrawing crypto
Submitting a funding offer
